<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>基于github的个人博客搭建</title>
      <link href="2021/04/20/%E5%9F%BA%E4%BA%8Egithub%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
      <url>2021/04/20/%E5%9F%BA%E4%BA%8Egithub%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><h2 id="GitHub-个人网址"><a href="#GitHub-个人网址" class="headerlink" title="GitHub 个人网址"></a>GitHub 个人网址</h2><p>亲测有效，以下步骤请参考：<a href="https://www.cnblogs.com/chri330dj/p/12409263.html">https://www.cnblogs.com/chri330dj/p/12409263.html</a></p><h3 id="Step-1："><a href="#Step-1：" class="headerlink" title="Step 1："></a>Step 1：</h3><p>创建一个github新仓库，仓库命名为：“(你的用户名).github.io”<br> <div align=cnter><br><img  src="https://img2020.cnblogs.com/i-beta/997121/202003/997121-20200304104458271-1977380369.png"/></p></div><h3 id="Step-2："><a href="#Step-2：" class="headerlink" title="Step 2："></a>Step 2：</h3><p>点击Settings进入设置页面，下拉找到“Github Pages”，<br>打勾表示已开启page，随意选择一个主题, 并将仓库设置成公开（public).<br> <div align=left><br>  <img src="https://img2020.cnblogs.com/i-beta/997121/202003/997121-20200304104740335-1010227372.png"/></p></div><h3 id="Step-3："><a href="#Step-3：" class="headerlink" title="Step 3："></a>Step 3：</h3><p>确保已配置Git和node.js，打开cmd输入下图命令，如图返回版本信息则表示成功配置node.js<br> <div align=left><br><img src="https://img2020.cnblogs.com/i-beta/997121/202003/997121-20200304105445493-1570324716.png"/></p></div>  <p>鼠标右键出现如下选择则表示成功配置git<br> <div align=left><br><img src="https://img2020.cnblogs.com/i-beta/997121/202003/997121-20200304105402731-908715653.png"/></p></div><h3 id="Step-4：安装HEXO"><a href="#Step-4：安装HEXO" class="headerlink" title="Step 4：安装HEXO"></a>Step 4：安装HEXO</h3><ul><li>在本地创建blog文件夹，在此文件夹内右击选择“Git Bash Here”  </li><li>输入  npm install -g hexo  安装HEXO确保已配置Git和node.js，打开cmd输入下图命令，如图返回版本信息则表示成功配置node.js</li></ul><div align=left><img  src="https://img2020.cnblogs.com/i-beta/997121/202003/997121-20200304111906265-674934207.png"/></div><ul><li>输入 hexo -v 确认是否安装成功<div align=left><img  src="https://img2020.cnblogs.com/i-beta/997121/202003/997121-20200304112428628-203035300.png"/></div></li></ul><h3 id="Step-5：构建hexo项目"><a href="#Step-5：构建hexo项目" class="headerlink" title="Step 5：构建hexo项目"></a>Step 5：构建hexo项目</h3><ul><li><p>输入 hexo init 自动构建hexo项目</p><div align=left><img  src="https://img2020.cnblogs.com/i-beta/997121/202003/997121-20200304112614522-342877400.png"/></div></li><li><p>构建成功提示</p><div align=left><img  src="https://img2020.cnblogs.com/i-beta/997121/202003/997121-20200304113529590-575879807.png"/></div></li><li><p>输入 npm install，安装所需组件</p></li><li><p>输入hexo g，生成</p></li><li><p>输入hexo s，开启本地预览服务 </p><div align=left><img  src="https://img2020.cnblogs.com/i-beta/997121/202003/997121-20200304113752094-1764630821.png"/></div></li><li><p>浏览器输入 <a href="http://localhost:4000/">http://localhost:4000</a> ，可以看到目前的效果</p></li></ul><p>(*) 如果出现一些莫名其妙的问题，可以先执行 hexo clean 来清理一下public的内容，然后再来重新生成和发布。</p><h3 id="Step-6：部署到GitHub"><a href="#Step-6：部署到GitHub" class="headerlink" title="Step 6：部署到GitHub"></a>Step 6：部署到GitHub</h3><ul><li>在项目根目录里找到 _config.yml 文件，修改其中的 deploy 字段<div align=left><img  src="https://img2020.cnblogs.com/i-beta/997121/202003/997121-20200304115004209-1104963069.png"/></div>安装扩展工具：输入   npm install hexo-deployer-git --save</li></ul><h3 id="Step-7：检查SSH-Keys设置"><a href="#Step-7：检查SSH-Keys设置" class="headerlink" title="Step 7：检查SSH Keys设置"></a>Step 7：检查SSH Keys设置</h3><ul><li><p>输入  cd ~/.ssh</p><div align=left><img  src="https://img2020.cnblogs.com/i-beta/997121/202003/997121-20200304115220416-1076136876.png"/></div></li><li><p>输入 ssh-keygen -t rsa -C “(邮箱地址)</p><div align=left><img  src="https://img2020.cnblogs.com/i-beta/997121/202003/997121-20200304120802182-523566544.png"/></div></li></ul><ul><li><p>输入 eval “$(ssh-agent -s)”，添加密钥到ssh-agent</p><div align=left><img  src="https://img2020.cnblogs.com/i-beta/997121/202003/997121-20200304133339703-2062447267.png"/></div></li><li><p>输入ssh-add ~/.ssh/github_rsa，添加生成的SSH key到ssh-agent</p><div align=left><img  src="https://img2020.cnblogs.com/i-beta/997121/202003/997121-20200304133556917-1120480583.png"/></div></li></ul><h3 id="Step-8：添加SSH-Key到Github"><a href="#Step-8：添加SSH-Key到Github" class="headerlink" title="Step 8：添加SSH Key到Github"></a>Step 8：添加SSH Key到Github</h3><ul><li><p>输入 cat ~/.ssh/id_rsa.pub 复制SSH Key到粘贴板<br>(*) 上一步也可以打开文件夹找到目标文件夹，打开id_rsa.pub进行复制</p><div align=left><img  src="https://img2020.cnblogs.com/i-beta/997121/202003/997121-20200304132328964-13532677.png"/></div></li><li><p>打开Github的Settings –&gt; SSH and GPG keys –&gt;  New SSH key </p><div align=left><img  src="https://img2020.cnblogs.com/i-beta/997121/202003/997121-20200304121749199-1460788374.png"/></div></li></ul><ul><li><p>粘贴到Key下面的文本框里</p></li><li><p>输入ssh -T <a href="mailto:&#x67;&#105;&#x74;&#64;&#x67;&#105;&#x74;&#x68;&#x75;&#98;&#x2e;&#99;&#111;&#109;">&#x67;&#105;&#x74;&#64;&#x67;&#105;&#x74;&#x68;&#x75;&#98;&#x2e;&#99;&#111;&#109;</a>，测试SSH是否添加成功，需要输入yes</p><div align=left><img  src="https://img2020.cnblogs.com/i-beta/997121/202003/997121-20200304122150859-1133452382.png"/></div></li><li><p>回到blog文件夹设置账户信息</p><div align=left><img  src="https://img2020.cnblogs.com/i-beta/997121/202003/997121-20200304134148953-1539100197.png"/></div></li></ul><h3 id="Step-9：部署到github"><a href="#Step-9：部署到github" class="headerlink" title="Step 9：部署到github"></a>Step 9：部署到github</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">* hexo d -g</span><br></pre></td></tr></table></figure><h3 id="Step-10"><a href="#Step-10" class="headerlink" title="Step 10:"></a>Step 10:</h3><p> 输入网址 https://(你的github用户名).github.io/   即可访问, 打不开可能因为网的问题，或者仓储设置成了私有模式。</p><p>常见hexo命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">hexo new &quot;postName&quot; #新建文章</span><br><span class="line">hexo new page &quot;pageName&quot; #新建页面</span><br><span class="line">hexo generate #生成静态页面至public目录</span><br><span class="line">hexo server #开启预览访问端口（默认端口4000，&#39;ctrl + c&#39;关闭server）</span><br><span class="line">hexo deploy #部署到GitHub</span><br><span class="line">hexo help  # 查看帮助</span><br><span class="line">hexo version  #查看Hexo的版本</span><br></pre></td></tr></table></figure><p>缩写：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hexo n &#x3D;&#x3D; hexo new</span><br><span class="line">hexo g &#x3D;&#x3D; hexo generate</span><br><span class="line">hexo s &#x3D;&#x3D; hexo server</span><br><span class="line">hexo d &#x3D;&#x3D; hexo deploy</span><br></pre></td></tr></table></figure><p>组合命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo s #清理并生成并本地预览，且打开本地服务</span><br><span class="line">hexo s -g #生成并本地预览</span><br><span class="line">hexo d -g #生成并上传</span><br></pre></td></tr></table></figure><p>生成文件命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hexo new post xxx 新建博客文件</span><br><span class="line">hexo new page &quot;about&quot; 添加关于页面</span><br><span class="line">hexo new page &quot;tags&quot; 添加标签页面</span><br><span class="line">hexo new page &quot;categories&quot; 添加分类页面</span><br></pre></td></tr></table></figure><h2 id="Hexo的next主题个性化配置"><a href="#Hexo的next主题个性化配置" class="headerlink" title="Hexo的next主题个性化配置"></a>Hexo的next主题个性化配置</h2><p>此处介绍了我尝试并成功的一些个性化配置操作！</p><h3 id="下载主题"><a href="#下载主题" class="headerlink" title="下载主题"></a>下载主题</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu系统安装及管理</title>
      <link href="2021/04/20/Ubuntu%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85%E5%8F%8A%E7%AE%A1%E7%90%86/"/>
      <url>2021/04/20/Ubuntu%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85%E5%8F%8A%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h2 id="ubuntu-install"><a href="#ubuntu-install" class="headerlink" title="ubuntu install"></a>ubuntu install</h2><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><p>1.关闭BIOS的安全启动项，启动方式设置成EFI<br>2.分两个区/boot 和 根目录 /（注意（boot分区大小应&gt;512M， 当使用ubuntu 20.04及以上版本，否则更新系统可能出现boot过小无法更新的情况）<br>3.启动点挂载boot分区，尤其是安装双系统时，否则容易出现安装成功，却找不到ubuntu启动项的情况。</p><h2 id="ubuntu-manage"><a href="#ubuntu-manage" class="headerlink" title="ubuntu manage"></a>ubuntu manage</h2><h3 id="安装包管理器"><a href="#安装包管理器" class="headerlink" title="安装包管理器"></a>安装包管理器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install synaptic</span><br></pre></td></tr></table></figure><h3 id="清理"><a href="#清理" class="headerlink" title="清理"></a>清理</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt autoremove</span><br></pre></td></tr></table></figure><h3 id="dpkg命令"><a href="#dpkg命令" class="headerlink" title="dpkg命令"></a>dpkg命令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dpkg -r | --remove xxx.deb  <span class="comment">#删除安装包</span></span><br><span class="line">dpkg -re -p |--purge xxx.deb <span class="comment">#连同配置文件一起删除</span></span><br><span class="line">dpkg -l <span class="comment">#查看系统中以安装软件包信息</span></span><br><span class="line">dpkg-reconfigure xxx <span class="comment">#重新配置软件包</span></span><br></pre></td></tr></table></figure><h3 id="apt命令"><a href="#apt命令" class="headerlink" title="apt命令"></a>apt命令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install -f xxx <span class="comment">#安装时顺便安装依赖</span></span><br><span class="line">apt-get remove -purge xxx <span class="comment">#卸载xxx同时删除配置文件</span></span><br><span class="line">apt-get update <span class="comment">#更新软件信息数据库</span></span><br><span class="line">apt-get upgrade <span class="comment">#进行系统升级，即更新已安装的包</span></span><br></pre></td></tr></table></figure><h3 id="安装grub-customizer"><a href="#安装grub-customizer" class="headerlink" title="安装grub-customizer"></a>安装grub-customizer</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo add-apt-repository ppa:danielrichter2007/grub-customizer</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install grub-customizer</span><br></pre></td></tr></table></figure><p>管理双系统开机启动界面</p><h3 id="安装sysmonitor"><a href="#安装sysmonitor" class="headerlink" title="安装sysmonitor"></a>安装sysmonitor</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo add-apt-repository ppa:fossfreedom/indicator-sysmonitor</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install indicator-sysmonitor</span><br></pre></td></tr></table></figure><p>启用内存、cpu、网速监视作用；设置开机自自启</p><h3 id="GCC版本管理"><a href="#GCC版本管理" class="headerlink" title="GCC版本管理"></a>GCC版本管理</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo add-apt-repository ppa:ubuntu-toolchain-r/<span class="built_in">test</span></span><br><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure><p>如果提示未安装，还需要先安装它的包</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install software-properties-common</span><br></pre></td></tr></table></figure><p>安装GCC-5：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install gcc-5 g++-5</span><br></pre></td></tr></table></figure><p>查看版本和修改默认版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ls &#x2F;usr&#x2F;bin&#x2F;gcc*</span><br><span class="line">ls &#x2F;usr&#x2F;bin&#x2F;g++*</span><br></pre></td></tr></table></figure><p>更新一下链接</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo update-alternatives --install &#x2F;usr&#x2F;bin&#x2F;gcc gcc &#x2F;usr&#x2F;bin&#x2F;gcc-5 53 </span><br><span class="line">sudo update-alternatives --install &#x2F;usr&#x2F;bin&#x2F;g++ g++ &#x2F;usr&#x2F;bin&#x2F;g++-5 10</span><br></pre></td></tr></table></figure><p>查看修改</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo update-alternatives --config gcc</span><br></pre></td></tr></table></figure><p>启用内存、cpu、网速监视作用；设置开机自自启</p><h3 id="Install-CUDA命令"><a href="#Install-CUDA命令" class="headerlink" title="Install CUDA命令"></a>Install CUDA命令</h3><p>下载相应版本的cuda,并安装好显卡驱动，以下为cuda的安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo dpkg -i cuda-repo-ubuntu1604-8-0-local-ga2_8.0.61-1_amd64.deb</span><br><span class="line">sudo dpkg -i cuda-repo-ubuntu1604-8-0-local-cublas-performance-update_8.0.61-1_amd64.deb </span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install cuda</span><br></pre></td></tr></table></figure><p>查看cuda是否安装成功</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nvidia-smi</span><br><span class="line">nvidia-settings</span><br></pre></td></tr></table></figure><p>添加环境变量</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export LD_LIBRARY_PATH&#x3D;&#x2F;usr&#x2F;local&#x2F;cuda-8.0&#x2F;lib64:$LD_LIBRARY_PATH</span><br><span class="line">export PATH&#x3D;&#x2F;usr&#x2F;local&#x2F;cuda-8.0&#x2F;bin:$PATH</span><br></pre></td></tr></table></figure><h3 id="Install-cudnn命令"><a href="#Install-cudnn命令" class="headerlink" title="Install cudnn命令"></a>Install cudnn命令</h3><p>下载需要的版本Runtime和Developer安装包安装<br>查看cudnn版本：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat &#x2F;usr&#x2F;include&#x2F;cudnn.h | grep CUDNN_MAJOR -A 2 或 cat &#x2F;usr&#x2F;local&#x2F;cuda&#x2F;include&#x2F;cudnn.h | grep CUDNN_MAJOR -A 2</span><br></pre></td></tr></table></figure><p>切换cudnn版本：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">update-alternatives: using &#x2F;usr&#x2F;include&#x2F;x86_64-linux-gnu&#x2F;cudnn_v7.h to provide &#x2F;usr&#x2F;include&#x2F;cudnn.h (libcudnn) in manual mode</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>git-使用</title>
      <link href="2021/04/20/git-%E4%BD%BF%E7%94%A8/"/>
      <url>2021/04/20/git-%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h3 id="建立本地git仓库"><a href="#建立本地git仓库" class="headerlink" title="建立本地git仓库"></a>建立本地git仓库</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init --bare sample.git</span><br></pre></td></tr></table></figure><p>选择一个目录作为Git仓库</p><h3 id="查看当前的git仓库状态"><a href="#查看当前的git仓库状态" class="headerlink" title="查看当前的git仓库状态"></a>查看当前的git仓库状态</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git status</span><br></pre></td></tr></table></figure><h3 id="更新文件状态"><a href="#更新文件状态" class="headerlink" title="更新文件状态"></a>更新文件状态</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add * </span><br></pre></td></tr></table></figure><p>*是更新全部</p><h3 id="更新说明"><a href="#更新说明" class="headerlink" title="更新说明"></a>更新说明</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m <span class="string">&quot;XXX“</span></span><br></pre></td></tr></table></figure><p>commit只是提交到缓存区域，出现“*** Please tell me who you are.”提示， </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.email <span class="string">&quot;you@example.com&quot;</span></span><br><span class="line">git config --global user.name <span class="string">&quot;Your Name&quot;</span></span><br><span class="line">git commit -m <span class="string">&quot;XXX&quot;</span></span><br></pre></td></tr></table></figure><p>没有则跳过，进行下一步</p><h3 id="上传项目"><a href="#上传项目" class="headerlink" title="上传项目"></a>上传项目</h3><p>如果是多人同时开发维护代码，得先拉取当前分支最新代码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull</span><br></pre></td></tr></table></figure><p>最后一步才是push到远程的master 或 main分支上</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin main</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
